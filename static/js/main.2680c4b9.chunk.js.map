{"version":3,"sources":["RenderSmoothImage.jsx","App.js","reportWebVitals.js","index.js"],"names":["RenderSmoothImage","src","alt","objectFit","title","React","useState","imageLoaded","setImageLoaded","isValidSrc","setIsValidSrc","className","style","onLoad","onError","craniums","require","App","Math","floor","random","tokenId","setTokenId","lookalikes","setLookalikes","mainImageLoaded","setMainImageLoaded","useEffect","cranium","indexOfAll","arr","val","reduce","acc","el","i","bestMatches","matchingTraits","push","slice","accumulator","currentValue","j","value","length","numMatchingTraits","findLookAlikes","lookalikesHtml","map","lookalike","process","Container","Row","Col","id","color","htmlFor","type","placeholder","onChange","event","min","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kjnpFA+BeA,EA5BW,SAAC,GAA6D,IAA3DC,EAA0D,EAA1DA,IAA0D,IAArDC,WAAqD,MAA/C,WAA+C,MAAnCC,iBAAmC,MAAvB,UAAuB,EAAZC,EAAY,EAAZA,MAAY,EAC/CC,IAAMC,UAAS,GADgC,mBAC9EC,EAD8E,KACjEC,EADiE,OAEjDH,IAAMC,WAAWL,GAFgC,mBAE9EQ,EAF8E,KAElEC,EAFkE,KAIrF,OACE,uBAAMC,UAAU,uBAAhB,UACGF,EACC,qBACEE,UAAS,2BAAsBJ,EAAc,UAAY,SAAhD,QACTH,MAAOA,EACPQ,MAAO,CAAET,aACTF,IAAKA,EACLC,IAAKA,EACLW,OAAQ,kBAAML,GAAe,IAC7BM,QAAS,kBAAMJ,GAAc,MAG/B,qBAAKC,UAAU,kBAAf,SAAkCT,IAEnCO,IAAeF,GACd,qBAAKI,UAAU,mBAAf,SACE,sBAAMA,UAAU,iBCrBpBI,EAAWC,EAAQ,IAuEVC,MArEf,WAAgB,IAAD,EAEiBX,mBAASY,KAAKC,MAAsB,MAAhBD,KAAKE,WAF1C,mBAENC,EAFM,KAEGC,EAFH,OAGuBhB,mBAAS,IAHhC,mBAGNiB,EAHM,KAGMC,EAHN,OAIiClB,oBAAS,GAJ1C,mBAINmB,EAJM,KAIWC,EAJX,KAwBbC,qBAAU,WACJN,GAnBN,SAAwBA,GAKtB,IAJA,IAAMO,EAAUb,EAASM,GACnBQ,EAAa,SAACC,EAAKC,GAAN,OAAcD,EAAIE,QAAO,SAACC,EAAKC,EAAIC,GAAV,OAAiBD,IAAOH,EAAP,sBAAiBE,GAAjB,CAAsBE,IAAKF,IAAM,KAC1FG,EAAc,GACdC,EAAiB,GAJU,WAKtBF,GAEPE,EAAeC,KAAKV,EAAQW,MAAM,EAAE,GAAGP,QAAO,SAACQ,EAAaC,EAAcC,GAA5B,OAAkCF,GAAeC,EAAaE,QAAU5B,EAASoB,GAAGO,EAAE,GAAGC,SAAQ,KAFxIR,EAAE,EAAGA,EAAEpB,EAAS6B,OAAQT,IAAM,EAA9BA,GAMT,IADA,IAAIU,EAAoB,EACjBT,EAAYQ,OAAS,IAC1BR,EAAYE,KAAZ,MAAAF,EAAW,YAASP,EAAWQ,EAAgBQ,KAC/CA,GAAqB,EAEvBrB,EAAcY,EAAYG,MAAM,EAAG,KAItBO,CAAezB,GAC5BK,GAAmB,KAClB,CAACL,IAEJ,IAAM0B,EAAiBxB,EAAWyB,KAAI,SAACC,GAAD,OACpC,cAAC,EAAD,CAAmChD,IAAKiD,uCAAwCD,EAAY,OAAQ/C,IAAK+C,EAAW7C,MAAO6C,GAAnGA,MAG1B,OACE,qBAAKtC,UAAU,MAAf,SACE,cAACwC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,sBAAKC,GAAG,mBAAmB3C,UAAU,OAArC,UAEE,8BACGU,GACC,qBAAKV,UAAU,OACb2C,GAAG,eACHrD,IAAKiD,uCAAwC7B,EAAU,OACvDnB,IAAKmB,EACLR,OAAQ,kBAAMa,GAAmB,QAIvC,gCACE,oBAAId,MAAO,CAAC2C,MAAO,SAAnB,SAA6B,iGAC7B,uBAAOC,QAAQ,eAAe5C,MAAO,CAAC2C,MAAO,SAA7C,2BACA,uBAAOD,GAAG,eAAeG,KAAK,SAASC,YAAY,aAAaf,MAAOtB,EAASsC,SAAU,SAACC,GAAYtC,EAAWJ,KAAK2C,IAAID,EAAME,OAAOnB,MAAO,iBAInJ,gCACE,uBACClB,GAAmBsB,KAEtB,uBAAS,iCCtDNgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2680c4b9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './App.scss';\r\n\r\nconst RenderSmoothImage = ({ src, alt = \"notFound\", objectFit = \"contain\", title }) => {\r\n  const [imageLoaded, setImageLoaded] = React.useState(false);\r\n  const [isValidSrc, setIsValidSrc] = React.useState(!!src);\r\n\r\n  return (\r\n    <span className=\"smooth-image-wrapper\">\r\n      {isValidSrc ? (\r\n        <img\r\n          className={`smooth-image img-${imageLoaded ? \"visible\" : \"hidden\"} m-1`}\r\n          title={title}\r\n          style={{ objectFit }}\r\n          src={src}\r\n          alt={alt}\r\n          onLoad={() => setImageLoaded(true)}\r\n          onError={() => setIsValidSrc(false)}\r\n        />\r\n      ) : (\r\n        <div className=\"smooth-no-image\">{alt}</div>\r\n      )}\r\n      {isValidSrc && !imageLoaded && (\r\n        <div className=\"smooth-preloader\">\r\n          <span className=\"loader\" />\r\n        </div>\r\n      )}\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default RenderSmoothImage;","import React, { useState, useEffect } from 'react';\r\nimport { Container, Col, Row } from 'react-bootstrap';\r\nimport RenderSmoothImage from './RenderSmoothImage'\r\nconst craniums = require('./cranium_array.json');\r\n\r\nfunction App() {\r\n\r\n  const [tokenId, setTokenId] = useState(Math.floor(Math.random() * 10762));\r\n  const [lookalikes, setLookalikes] = useState([]);\r\n  const [mainImageLoaded, setMainImageLoaded] = useState(false);\r\n\r\n  function findLookAlikes(tokenId) {\r\n    const cranium = craniums[tokenId];\r\n    const indexOfAll = (arr, val) => arr.reduce((acc, el, i) => (el === val ? [...acc, i] : acc), []);\r\n    let bestMatches = [];\r\n    let matchingTraits = [];\r\n    for (let i=0; i<craniums.length; i++) {\r\n      // Disregard the first attribute, which is background\r\n      matchingTraits.push(cranium.slice(1,6).reduce((accumulator, currentValue, j) => accumulator + (currentValue.value === craniums[i][j+1].value), 0));\r\n    }\r\n    // At most 4 traits can match (5 traits would just be the same cranium)\r\n    let numMatchingTraits = 4;\r\n    while (bestMatches.length < 10) {\r\n      bestMatches.push(...indexOfAll(matchingTraits, numMatchingTraits));\r\n      numMatchingTraits -= 1;\r\n    }\r\n    setLookalikes(bestMatches.slice(0, 10));\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (tokenId) findLookAlikes(tokenId);\r\n    setMainImageLoaded(false);\r\n  }, [tokenId])\r\n\r\n  const lookalikesHtml = lookalikes.map((lookalike) =>\r\n    <RenderSmoothImage key={lookalike} src={process.env.PUBLIC_URL + '/craniums/' + lookalike + '.png'} alt={lookalike} title={lookalike}></RenderSmoothImage>\r\n  )\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Container>\r\n        <Row>\r\n          <Col>\r\n            <div id=\"cranium-selector\" className=\"mt-2\">\r\n              {/* Main cranium image */}\r\n              <div>\r\n                {tokenId &&\r\n                  <img className=\"me-3\"\r\n                    id=\"main-cranium\"\r\n                    src={process.env.PUBLIC_URL + '/craniums/' + tokenId + '.png'}\r\n                    alt={tokenId}\r\n                    onLoad={() => setMainImageLoaded(true)}>\r\n                  </img>}\r\n              </div>\r\n              {/* Header and input to select token id */}\r\n              <div>\r\n                <h2 style={{color: \"white\"}}><strong>All craniums are unique, but some are wickedly similar...</strong></h2>\r\n                <label htmlFor=\"tokenIdInput\" style={{color: \"white\"}}>Token ID:&nbsp;</label>\r\n                <input id=\"tokenIdInput\" type=\"number\" placeholder=\"Cranium ID\" value={tokenId} onChange={(event) => { setTokenId(Math.min(event.target.value, 10761))}}></input>\r\n              </div>\r\n            </div>\r\n            {/* The look alikes */}\r\n            <div>\r\n              <br></br>\r\n              {mainImageLoaded && lookalikesHtml}\r\n            </div>\r\n            <br></br><br></br>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}